<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title><![CDATA[EPIC RUBY SMASH TIME GO BOOM]]></title>
	<link href="http://mikespangler.github.io/atom.xml" rel="self"/>
	<link href="http://mikespangler.github.io/"/>
	<updated>2014-01-06T13:36:22-05:00</updated>
	<id>http://mikespangler.github.io/</id>
	<author>
		<name><![CDATA[Mike Spangler]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>

	
	<entry>
		
			<title type="html"><![CDATA[Form_for]]></title>
		
		<link href="http://mikespangler.github.io/blog/2014/01/06/form_for/"/>
		<updated>2014-01-06T00:00:00-05:00</updated>
		<id>http://mikespangler.github.io/blog/2014/01/06/form_for</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h1>rails magic : form_for</h1>

<p>When refactoring forms, I often find that I have eschewed rails magic in favor of needlessly verbose statements.  In this post, I will closely examine the <code>form_for</code> helper in order to determine exactly what shortcuts it offers.</p>

<p><code>form_for</code> &lsquo;binds&rsquo; a form to a model object that you declare.</p>

<pre><code>&lt;%= form_for @cheese %&gt;
</code></pre>

<p>In this case we have binded our form to our Cheese model.  To create a new instance of Cheese , we have a method in our controller that probably looks something like this.</p>

<pre><code>class CheeseController &lt; ApplicationController
    def new
      @cheese = Cheese.new
    end
    def create
      @bowl = Bowl.create(bowl_params)
      @bowl.save
      Player.add_new_bowl
      redirect_to bowls_path
    end
 end
</code></pre>

<p>The form_for method creates a form builder object that is expressed with the <code>f</code> variable.  You can call a myriad number of methods on <code>f</code> to generate your HTML form.</p>

<pre><code>&lt;%= form_for @cheese do |f| %&gt;
  &lt;%= f.label_tag :stinkiness, "Stinkiness" %&gt;
  &lt;%= f.text_field :stinkiness %&gt;
  &lt;%= f.submit "Create" %&gt;
&lt;% end %&gt;
</code></pre>

<p>The above ERB will generate the below HTML.</p>

<pre><code>&lt;form accept-charset="UTF-8" action="/cheeses" class="cheese"   id="new_cheese" method="post"&gt;
  &lt;label for="stinkiness"&gt;Stinkiness&lt;/label&gt;
  &lt;input id="cheese_stinkiness" name="cheese[stinkiness]" type="text" /&gt;&lt;br&gt;
&lt;/form&gt;
</code></pre>

<p>So what did we get from our <code>form_for</code>?</p>

<p>Well, we never specified whether we wanted to create a new instance of cheese, or update an old one.  Because of <code>form_for</code>, Rails knew to call <code>record.new_record?</code>, and determined that the method called should be &lsquo;create&rsquo;, and not &lsquo;patch&rsquo;.  We saved ourselves the trouble of writing the following line of code.</p>

<pre><code>form_for(@cheese, url: {action: "create"})
</code></pre>

<p>Had our record already existed and our goal was to update, we would have saved writing the following line of code.</p>

<pre><code>form_for(@cheese, url: cheese_path(@cheese), html: {method: "patch"})
</code></pre>

<p>Also, <code>form_for</code> created a new key in the params hash called <code>params[:cheese]</code>, that has all the input fields as key-value pairs.  This is particularly useful when editing multiple objects in the same form with the <code>fields_for</code> tag.</p>

<p>The last benefit of <code>form_for</code> is in the realm of routing namespaces. If in our routes we had code like this:</p>

<pre><code>namespace :charcuterie do
  resources :cheeses
end
</code></pre>

<p>We could specify to our form the correct path and action with <code>form_for</code> simply by using the below code.</p>

<pre><code>form_for [:charcuterie, @cheese]
</code></pre>

<p>This has been a brief summary of the magic of <code>form_for</code>.  Stay tuned for future snippets on choice bits of rails magic.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[The End of Fun]]></title>
		
		<link href="http://mikespangler.github.io/blog/2013/10/08/the-end-of-fun/"/>
		<updated>2013-10-08T20:38:00-04:00</updated>
		<id>http://mikespangler.github.io/blog/2013/10/08/the-end-of-fun</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h2>Who Makes a Better Coder?</h2>

<h4>the rigid taskmaster, or the free-floating esoteric&hellip;</h4>

<p>The idea that struck me most about Sarah Pei&rsquo;s presentation was that to create, successful one must fully embrace the  dynamism of their own personality.  To explain, Sarah invokes the famous Walt Whitman quote from Leaves of Grass:</p>

<p><a href="http://imgur.com/752EJr7"><img src="http://i.imgur.com/752EJr7.png" title="Hosted by imgur.com"/></a></p>

<p>It turns out that creative people are not defined by their age, race, gender, or even intelligence.  What creative people share are successful habits.  What most of their habits have in common is some element of context change.</p>

<p>You must base yourself in what you do know, before leaping into the unknown.  Sarah calls the example of Twyla Tharp &ndash; one of the most successful choreographers in American dance.  Thyla is 72 years old, and for the last 40 years she has repeated the same process of organized context change.  In the mornings, she practices moves she has repeated thousands of times.  It is a rote, comfortable exercise.  Every afternoon she experiments, drawing on the core elements she reinforced that morning, to let chaos reign, and gives herself permission to try new movements.  She executes, and she then creates.</p>

<p><a href="http://imgur.com/fVbXOLC"><img src="http://i.imgur.com/fVbXOLC.png" title="Hosted by imgur.com"/></a></p>

<h4>So how does this translate to coding?</h4>

<p>Coding is a creative process, as well as an intensely directed one.  To succeed at any scale, one must occupy both provinces. We need context change to reach our apex productivity, but what exactly is context change in the context of coding?</p>

<p>Simply put, it&rsquo;s chopping things up.  It&rsquo;s learning to tie knots in the middle of the day.  It&rsquo;s changing from the couch to the orange springy stool.  It&rsquo;s pair programming.</p>

<p>Perhaps most fundamentally, it&rsquo;s our FS class composition.  Sarah&rsquo;s presentation cites research that shows teams comprised of VISIBLY DISSIMILIAR individuals perform better than homogenous peer teams.</p>

<h4>On a more structured level, it looks like this:</h4>

<p><a href="http://imgur.com/jrmBucG"><img src="http://i.imgur.com/jrmBucG.png" title="Hosted by imgur.com"/></a></p>

<p>So, the next time my tests aren&rsquo;t passing for the 80th consecutive time, and I&rsquo;m throwing up hail mary methods, convinced that Ruby is broken, I&rsquo;m going for a walk.  And it&rsquo;s going to be the most productive thing in the world, because we need both contexts to perform optimally.</p>

<p>To think of it in terms of coffee-  I often wake up in the morning with a few weird ideas bumping around in my cerebral stewâ€¦ fresh ideas that originated in the context of sleep, in the whitespace afforded by dreams.  That&rsquo;s a powerfully creative state of mind that I crave, but if I didn&rsquo;t get up and have my coffee, I&rsquo;d lay in bed all day dreaming.</p>
]]>
		</content>
	</entry>
	
</feed>
